######################################################################################
# Goal: mtCN vs TMT expression stepwise regression
#
# Input file: ccle176.mtCN_and_TMT.raw_vals.complete_obs.txt
#  columns: 176 cancer encyclopedia cell lines
#  rows: first row is mtCN (estimated from whole genome sequence data), other 5153 rows are proteins
#  values: TMT protein abundance metric of protein in cell line (or mtCN for first row)
#
# Contents:stepwise regression was performed using the R package leaps (regsubsets, nvmax=4, method="forward").
######################################################################################

library(tidyverse)
library(leaps)

# Input data with mtCN and TMT values (not ranks)
dfRAW=read.delim("ccle176.mtCN_and_TMT.raw_vals.complete_obs.txt",stringsAsFactors=FALSE)
# make Gene_Symbol the row names and then remove this as a column
rownames(dfRAW)=dfRAW$GeneSym
dfRAW=dfRAW[,2:ncol(dfRAW)]

# filter out 3 duplicates (cell lines that were present in two different TenPlexes)
# note these cell lines are still present in a second TenPlexes:
#    CAL120_BREAST_TenPx02,HCT15_LARGE_INTESTINE_TenPx18,SW948_LARGE_INTESTINE_TenPx11
cellLineDuplicates=c("CAL120_BREAST_TenPx28","HCT15_LARGE_INTESTINE_TenPx30","SW948_LARGE_INTESTINE_TenPx20")
dfRAW=dfRAW[,!(colnames(dfRAW) %in% cellLineDuplicates)]

# create a transposed matrix with genes (and mtCN) as columns and cell lines as rows
dfRAWt=data.frame(t(dfRAW))
# convert raw vals to percentile ranks across the n cell lines (use rank / num_cell_lines)
n=nrow(dfRAWt)
dfPERCENTILE=data.frame(apply(dfRAWt,2,rank,ties.method="min"))/n
modelsPERCENTILE <- regsubsets(mtCN~., data = dfPERCENTILE, nvmax = 3, method = "forward",really.big=TRUE)
coef(modelsPERCENTILE,1:3)

# Why did we select nvmax=3 for our final model?
# We used a tolerance level of 1e-5 and kept adding parameters until 
# the regression t-statistic pvalue exceeded 1e-5

modelsPERCENTILE <- regsubsets(mtCN~., data = dfPERCENTILE, nvmax = 6, method = "forward",really.big=TRUE)
coef(modelsPERCENTILE,1:15)

# here are models with different parameters
m1=dfPERCENTILE[,c("mtCN","TFAM_Q00059")]
m2=dfPERCENTILE[,c("mtCN","TFAM_Q00059","HIST1H2BA_Q96A08")]
m3=dfPERCENTILE[,c("mtCN","TFAM_Q00059","HIST1H2BA_Q96A08","MRPS27_Q92552")]
m4=dfPERCENTILE[,c("mtCN","TFAM_Q00059","HIST1H2BA_Q96A08","MRPS27_Q92552","GLRX3_O76003")]
m5=dfPERCENTILE[,c("mtCN","TFAM_Q00059","HIST1H2BA_Q96A08","MRPS27_Q92552","GLRX3_O76003","IGF1R_P08069")]
# use limma to get t-statistics and pvalues for each parameter for each model
library(limma)
fit1<-lm(mtCN ~ TFAM_Q00059, data=m1)
fit2<-lm(mtCN ~ TFAM_Q00059 + HIST1H2BA_Q96A08, data=m2)
fit3<-lm(mtCN ~ TFAM_Q00059 + HIST1H2BA_Q96A08 + MRPS27_Q92552, data=m3)
fit4<-lm(mtCN ~ TFAM_Q00059 + HIST1H2BA_Q96A08 + MRPS27_Q92552 + GLRX3_O76003, data=m4)
fit5<-lm(mtCN ~ TFAM_Q00059 + HIST1H2BA_Q96A08 + MRPS27_Q92552 + GLRX3_O76003 + IGF1R_P08069, data=m5)
# for fit4, the 4th parameter GLRX3 has pvalue > 1e-5
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)

